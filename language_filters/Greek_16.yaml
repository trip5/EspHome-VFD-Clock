substitutions:

# for 8-MD-06INKM (VFD-Clock):
  # Replace characters: Unicode character:Fubata byte (characters that already exist on the device, can use decimal, hex, or binary in MSB-LSB order)
  # Some characters are available (or their Latin similars): ΙαΦβΜρΑπούλγΣΟΝΔΚΤΠμίς
  replace: "Ι:I;α:176;Φ:228;β:177;Μ:M;ρ:186;Α:A;π:226;ο:o;ύ:163;λ:183;γ:y;Σ:191;Ο:O;Ν:N;Δ:179;Κ:K;Τ:T;Π:185;μ:184;ί:148;ς:135;"
# Note that other displays are untested and maybe unknown
  # And some are not: άενικτέυίυσμώήη
  # Custom characters: Unicode character:column1,column2,column3,column4,column5 (binary painting from bottom to top)
  custom: "ά:120,68,36,25,103;ε:28,42,42,34,20;ν:6,24,32,30,2;ι:0,0,60,32,16;κ:0,60,8,52,0;τ:4,4,60,36,20;έ:28,42,42,35,21;υ:28,32,32,32,60;ί:0,0,60,33,17;υ:30,32,32,32,30;σ:28,34,34,34,30;μ:62,32,32,32,30;ώ:30,32,26,33,30;ή:56,4,6,5,120;η:62,4,2,2,124;"

# Special notes:
# Greek has not been eyeballed by an actual Greek person - if you can help, thank you!
# There are a lot of special characters in Greek months
# Months may not display correctly unless using a lot of replace characters (remember custom characters can only display 8 at once!)

text_sensor:

  - platform: template
    id: time_text
    name: "${friendly_name} Replacement Time Text"
    entity_category: diagnostic
    update_interval: never
    internal: true
    filters:
      - lambda: |-
          // Use the format "!%H:%M%p" (!01:25PM) and run filters on it to get 1:25πμ
          if (id(hour12_mode).state == 1) {
            int offset = 0;
            // delete next 3 lines if using the HA version...
            if (id(tzoffset_on).state != 0) {
              offset = (int)(60 * 60 * (id(tzoffset).state));
            }
            std::time_t tz1time = (id(my_time).now().timestamp + offset);
            std::tm *tz1time_astm = localtime(&tz1time);
            char display_tmdt[20];
            strftime(display_tmdt, 20, "%p%l:%M", tz1time_astm);
            std::string tmdt(display_tmdt);
            return tmdt;
          } else {
            return x;
          }
      - append: ""
      - prepend: ""
      - substitute:
        - "!0 -> " # removes leading 0 on Hours
        - "AM -> πμ"
        - "PM -> μμ"
        - "! -> " # keep this at the end
  - platform: template
    id: date_text
    name: "${friendly_name} Replacement Date Text"
    entity_category: diagnostic
    update_interval: never
    internal: true
    filters:
      - lambda: |-
          // Use the format "%d %b" (23 May) and run filters on it to get 23 Μάι
          int offset = 0;
          // delete next 3 lines if using the HA version...
          if (id(tzoffset_on).state != 0) {
            offset = (int)(60 * 60 * (id(tzoffset).state));
          }
          std::time_t tz1time = (id(my_time).now().timestamp + offset);
          std::tm *tz1time_astm = localtime(&tz1time);
          char display_tmdt[20];
          strftime(display_tmdt, 20, "%d %b", tz1time_astm);
          std::string tmdt(display_tmdt);
          return tmdt;
      - append: ""
      - prepend: ""
      - substitute:
        - "Jan -> Ιανουάριος"
        - "Feb -> Φεβρουάριος"
        - "Mar -> Μάρτιος"
        - "Apr -> Απρίλιος"
        - "May -> Μάιος"
        - "Jun -> Ιούνιος"
        - "Jul -> Ιούλιος"
        - "Aug -> Αύγουστος"
        - "Sep -> Σεπτέμβριος"
        - "Oct -> Οκτώβριος"
        - "Nov -> Νοέμβριος"
        - "Dec -> Δεκέμβριος"
  - platform: template
    id: dateA_text
    name: "${friendly_name} Replacement Date A Text"
    entity_category: diagnostic
    update_interval: never
    internal: true
    filters:
      - lambda: |-
          // Use the format "%Y %a" (2025 Fri) and run filters on it to get 2025 Παρασκευή
          int offset = 0;
          // delete next 3 lines if using the HA version...
          if (id(tzoffset_on).state != 0) {
            offset = (int)(60 * 60 * (id(tzoffset).state));
          }
          std::time_t tz1time = (id(my_time).now().timestamp + offset);
          std::tm *tz1time_astm = localtime(&tz1time);
          char display_tmdt[20];
          strftime(display_tmdt, 20, "%Y %a", tz1time_astm);
          std::string tmdt(display_tmdt);
          return tmdt;
      - append: ""
      - prepend: ""
      - substitute:
        - "Sun -> Κυριακή"
        - "Mon -> Δευτέρα"
        - "Tue -> Τρίτη"
        - "Wed -> Τετάρτη"
        - "Thu -> Πέμπτη"
        - "Fri -> Παρασκευή"
        - "Sat -> Σάββατο"