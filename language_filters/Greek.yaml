substitutions:

  # Replace characters: Unicode character:Fubata byte (character that already exists on the device: ASCII, decimal, hex, or binary in MSB-LSB order)

  # for 8-MD-06INKM (VFD-Clock) - some characters are available (or their Latin similars): ΙΜΑογΟΝΚΤαΦβρύλΣΔΠμ
  replace: "Ι:I;Μ:M;Α:A;ο:o;γ:Y;Ο:O;Ν:N;Κ:K;Τ:T;ν:Y;α:176;Φ:228;β:177;ρ:186;ύ:163;λ:183;Σ:191;Δ:179;Π:185;μ:184"

  # Some characters are not: άενιίκτέυυσμώήηςπ
  # Custom characters: Unicode character:column1,column2,column3,column4,column5 (binary painting from bottom to top)
  custom: "ά:120,68,38,31,100;ε:28,42,42,34,20;ι:0,0,60,32,16;ί:0,0,58,33,16;κ:0,60,8,52,0;τ:4,4,60,36,20;έ:28,42,42,35,21;υ:28,32,32,32,60;υ:30,32,32,32,30;σ:28,34,34,34,30;μ:62,32,32,32,30;ώ:30,32,26,33,30;ή:56,4,6,5,120;η:62,4,2,2,124;ς:12,18,18,18,98;π:4,124,4,124,4;"

  # Note that other displays are untested and maybe unknown so...?
  replace: ""
  custom: ""

# Special note:
# Greek has not been eyeballed by an actual Greek person - if you can help, thank you!  I'm sure many look terrible - sorry!

text_sensor:

  - platform: template
    id: time_text
    name: "${friendly_name} Replacement Time Text"
    entity_category: diagnostic
    update_interval: never
    internal: true
    filters:
      - lambda: |-
          // Use the format "!%H:%M%p" (!01:25PM) and run filters on it to get 1:25πμ
          if (id(hour12_mode).state == 1) {
            int offset = 0;
            // delete next 3 lines if using the HA version...
            if (id(tzoffset_on).state != 0) {
              offset = (int)(60 * 60 * (id(tzoffset).state));
            }
            std::time_t tz1time = (id(my_time).now().timestamp + offset);
            std::tm *tz1time_astm = localtime(&tz1time);
            char display_tmdt[20];
            strftime(display_tmdt, 20, "%p%l:%M", tz1time_astm);
            std::string tmdt(display_tmdt);
            return tmdt;
          } else {
            return x;
          }
      - append: ""
      - prepend: ""
      - substitute:
        - "!0 -> " # removes leading 0 on Hours
        - "AM -> πμ"
        - "PM -> μμ"
        - "! -> " # keep this at the end
  - platform: template
    id: date_text
    name: "${friendly_name} Replacement Date Text"
    entity_category: diagnostic
    update_interval: never
    internal: true
    filters:
      - lambda: |-
          // Use the format "%d %b" (23 May) and run filters on it to get 23 Μάι
          int offset = 0;
          // delete next 3 lines if using the HA version...
          if (id(tzoffset_on).state != 0) {
            offset = (int)(60 * 60 * (id(tzoffset).state));
          }
          std::time_t tz1time = (id(my_time).now().timestamp + offset);
          std::tm *tz1time_astm = localtime(&tz1time);
          char display_tmdt[20];
          strftime(display_tmdt, 20, "%d %b", tz1time_astm);
          std::string tmdt(display_tmdt);
          return tmdt;
      - append: ""
      - prepend: ""
      - substitute:
        - "Jan -> Ιαν"
        - "Feb -> Φεβ"
        - "Mar -> Μάρ"
        - "Apr -> Απρ"
        - "May -> Μάι"
        - "Jun -> Ιούν"
        - "Jul -> Ιούλ"
        - "Aug -> Αύγ"
        - "Sep -> Σεπ"
        - "Oct -> Οκτ"
        - "Nov -> Νοέ"
        - "Dec -> Δεκ"
  - platform: template
    id: dateA_text
    name: "${friendly_name} Replacement Date A Text"
    entity_category: diagnostic
    update_interval: never
    internal: true
    filters:
      - lambda: |-
          // Use the format "%a" (Fri) and run filters on it to get Παρ
          int offset = 0;
          // delete next 3 lines if using the HA version...
          if (id(tzoffset_on).state != 0) {
            offset = (int)(60 * 60 * (id(tzoffset).state));
          }
          std::time_t tz1time = (id(my_time).now().timestamp + offset);
          std::tm *tz1time_astm = localtime(&tz1time);
          char display_tmdt[20];
          strftime(display_tmdt, 20, "%a", tz1time_astm);
          std::string tmdt(display_tmdt);
          return tmdt;
      - append: ""
      - prepend: ""
      - substitute:
        - "Sun -> Κυρ"
        - "Mon -> Δευ"
        - "Tue -> Τρί"
        - "Wed -> Τετ"
        - "Thu -> Πέμ"
        - "Fri -> Παρ"
        - "Sat -> Σάβ"