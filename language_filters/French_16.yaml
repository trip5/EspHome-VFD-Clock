substitutions:

# for 8-MD-06INKM (VFD-Clock):
  # Replace characters: Unicode character:Fubata byte (characters that already exist on the device, can use decimal, hex, or binary in MSB-LSB order)
  # Some characters are available (or their Latin similars): ΙαΦβΜρΑπούλγΣΟΝΔΚΤΠμ
  replace: "é:130;û:158;"
# Note that other displays are untested and maybe unknown so use replace with un-accented characters for now
  replace: "é:e;û:u;"
  # Custom characters: Unicode character:column1,column2,column3,column4,column5 (binary painting from bottom to top)
  custom: "" # still required, even if blank!!

text_sensor:

  - platform: template
    id: time_text
    name: "${friendly_name} Replacement Time Text"
    entity_category: diagnostic
    update_interval: never
    internal: true
    filters:
      - lambda: |-
          // Use the format "!%Hh%Mm%Ss" (!03h25m33s) and run filters on it to get 3h25m33s
          if (id(hour12_mode).state == 1) {
            int offset = 0;
            // delete next 3 lines if using the HA version...
            if (id(tzoffset_on).state != 0) {
              offset = (int)(60 * 60 * (id(tzoffset).state));
            }
            std::time_t tz1time = (id(my_time).now().timestamp + offset);
            std::tm *tz1time_astm = localtime(&tz1time);
            char display_tmdt[20];
            strftime(display_tmdt, 20, "!%Hh%M%Ss", tz1time_astm);
            std::string tmdt(display_tmdt);
            return tmdt;
          } else {
            return x;
          }
      - append: ""
      - prepend: ""
      - substitute: # delete this line if nothing below it
        - "!0 -> " # removes leading 0 on Hours
        - "! -> " # keep this at the end
  - platform: template
    id: date_text
    name: "${friendly_name} Replacement Date Text"
    entity_category: diagnostic
    update_interval: never
    internal: true
    filters:
      - lambda: |-
          // Use the format "%d %b" (23 May) and run filters on it to get 23 mai
          if (id(hour12_mode).state == 1) {
            int offset = 0;
            // delete next 3 lines if using the HA version...
            if (id(tzoffset_on).state != 0) {
              offset = (int)(60 * 60 * (id(tzoffset).state));
            }
            std::time_t tz1time = (id(my_time).now().timestamp + offset);
            std::tm *tz1time_astm = localtime(&tz1time);
            char display_tmdt[20];
            strftime(display_tmdt, 20, "%d %b", tz1time_astm);
            std::string tmdt(display_tmdt);
            return tmdt;
          } else {
            return x;
          }
      - append: ""
      - prepend: ""
      - substitute:
        - "Jan -> janvier"
        - "Feb -> février"
        - "Mar -> mars"
        - "Apr -> avril"
        - "May -> mai"
        - "Jun -> juin"
        - "Jul -> juillet"
        - "Aug -> août"
        - "Sep -> septembre"
        - "Oct -> octobre"
        - "Nov -> novembre"
        - "Dec -> décembre"
  - platform: template
    id: dateA_text
    name: "${friendly_name} Replacement Date A Text"
    entity_category: diagnostic
    update_interval: never
    internal: true
    filters:
      - lambda: |-
          // Use the format "%Y %a" (2025 Fri) and run filters on it to get 2025 vendredi
          int offset = 0;
          // delete next 3 lines if using the HA version...
          if (id(tzoffset_on).state != 0) {
            offset = (int)(60 * 60 * (id(tzoffset).state));
          }
          std::time_t tz1time = (id(my_time).now().timestamp + offset);
          std::tm *tz1time_astm = localtime(&tz1time);
          char display_tmdt[20];
          strftime(display_tmdt, 20, "%Y %a", tz1time_astm);
          std::string tmdt(display_tmdt);
          return tmdt;
      - append: ""
      - prepend: ""
      - substitute:
        - "Sun -> dimanche"
        - "Mon -> lundi"
        - "Tue -> mardi"
        - "Wed -> mercredi"
        - "Thu -> jeudi"
        - "Fri -> vendredi"
        - "Sat -> samedi"